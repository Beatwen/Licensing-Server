name: Deploy Frontend

on:
  push:
    branches: [ master ]
    paths:
      - 'Frontend/**'
      - '.github/workflows/frontend-deploy.yml'

env:
  # API Configuration
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
  
  # Frontend Configuration
  VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
  VITE_APP_URL: ${{ secrets.VITE_APP_URL }}
  
  # Authentication Configuration
  VITE_JWT_EXPIRES_IN: ${{ secrets.VITE_JWT_EXPIRES_IN }}
  
  # Email Configuration
  VITE_EMAIL_FROM: ${{ secrets.VITE_EMAIL_FROM }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd Frontend
          npm install
          
      - name: Build
        run: |
          cd Frontend
          # Create a temporary .env file for build
          cat > .env << 'EOL'
          # API Configuration
          VITE_API_URL=$VITE_API_URL
          VITE_API_KEY=$VITE_API_KEY
          
          # Frontend Configuration
          VITE_APP_NAME=$VITE_APP_NAME
          VITE_APP_URL=$VITE_APP_URL
          
          # Authentication Configuration
          VITE_JWT_EXPIRES_IN=$VITE_JWT_EXPIRES_IN
          
          # Email Configuration
          VITE_EMAIL_FROM=$VITE_EMAIL_FROM
          EOL
          
          # Verify .env was created correctly
          echo "===== ENVIRONMENT VARIABLES ====="
          cat .env
          echo "=============================="
          
          npm run build

      - name: Clean deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Stop any processes that might be using the files
            sudo systemctl stop apache2 || true
            
            # Remove existing files with force and create temp directory
            sudo rm -rf /var/www/licensing/Licensing-Server/Frontend/dist
            sudo rm -rf /tmp/frontend-deploy
            sudo mkdir -p /tmp/frontend-deploy
            sudo chown -R $USER:$USER /tmp/frontend-deploy
            sudo chmod -R 777 /tmp/frontend-deploy
            
            echo "===== DIRECTORY PREPARED ====="
            ls -la /tmp/
            echo "=============================="
          
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "Frontend/dist/*"
          target: "/tmp/frontend-deploy/"
          strip_components: 2
          overwrite: true
          rm: false
          
      - name: Move files and configure Apache
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create final directory structure
            sudo mkdir -p /var/www/licensing/Licensing-Server/Frontend/dist/
            
            # Move files from temp to final location
            sudo cp -r /tmp/frontend-deploy/* /var/www/licensing/Licensing-Server/Frontend/dist/
            
            # Clean up temp directory
            sudo rm -rf /tmp/frontend-deploy
            
            # Set proper permissions for the deployed files
            sudo chown -R www-data:www-data /var/www/licensing/Licensing-Server/Frontend/dist/
            sudo chmod -R 755 /var/www/licensing/Licensing-Server/Frontend/dist/
            sudo find /var/www/licensing/Licensing-Server/Frontend/dist/ -type f -exec chmod 644 {} \;
            
            # Create .htaccess file for SPA routing
            cat > /var/www/licensing/Licensing-Server/Frontend/dist/.htaccess << 'EOL'
            <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteBase /
              RewriteRule ^index\.html$ - [L]
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule . /index.html [L]
            </IfModule>
            
            # Security headers
            <IfModule mod_headers.c>
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
            </IfModule>
            
            # Cache control for assets
            <IfModule mod_expires.c>
              ExpiresActive on
              ExpiresByType text/css "access plus 1 year"
              ExpiresByType application/javascript "access plus 1 year"
              ExpiresByType image/png "access plus 1 year"
              ExpiresByType image/svg+xml "access plus 1 year"
            </IfModule>
            EOL
            
            # Set correct permissions for .htaccess
            sudo chmod 644 /var/www/licensing/Licensing-Server/Frontend/dist/.htaccess
            
            # Start Apache
            sudo systemctl start apache2
            sudo systemctl reload apache2
            
            # Verify deployment
            echo "===== DEPLOYMENT VERIFICATION ====="
            echo "Checking deployed files:"
            ls -la /var/www/licensing/Licensing-Server/Frontend/dist/
            echo ""
            echo "Checking assets directory:"
            ls -la /var/www/licensing/Licensing-Server/Frontend/dist/assets/ || echo "No assets directory found"
            echo ""
            echo "Apache status:"
            sudo systemctl status apache2 --no-pager -l
            echo "==============================" 