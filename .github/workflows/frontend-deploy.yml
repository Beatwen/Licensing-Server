name: Deploy Frontend

on:
  push:
    branches: [ master ]
    paths:
      - 'Frontend/**'
      - '.github/workflows/frontend-deploy.yml'

env:
  # API Configuration
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
  
  # Frontend Configuration
  VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
  VITE_APP_URL: ${{ secrets.VITE_APP_URL }}
  
  # Authentication Configuration
  VITE_JWT_EXPIRES_IN: ${{ secrets.VITE_JWT_EXPIRES_IN }}
  
  # Email Configuration
  VITE_EMAIL_FROM: ${{ secrets.VITE_EMAIL_FROM }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd Frontend
          npm install
          
      - name: Build
        run: |
          cd Frontend
          # Create a temporary .env file for build
          cat > .env << 'EOL'
          # API Configuration
          VITE_API_URL=$VITE_API_URL
          VITE_API_KEY=$VITE_API_KEY
          
          # Frontend Configuration
          VITE_APP_NAME=$VITE_APP_NAME
          VITE_APP_URL=$VITE_APP_URL
          
          # Authentication Configuration
          VITE_JWT_EXPIRES_IN=$VITE_JWT_EXPIRES_IN
          
          # Email Configuration
          VITE_EMAIL_FROM=$VITE_EMAIL_FROM
          EOL
          
          npm run build
          
      - name: Create deployment package
        run: |
          cd Frontend/dist
          tar -czf ../../frontend-build.tar.gz .
          
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "frontend-build.tar.gz"
          target: "/tmp/"
          
      - name: Extract and configure deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Define variables
            DEPLOY_PATH="/var/www/licensing/Licensing-Server/Frontend/dist"
            BACKUP_PATH="/var/www/licensing/Licensing-Server/Frontend/dist_backup_$(date +%Y%m%d_%H%M%S)"
            
            # Create backup of current deployment if it exists
            if [ -d "$DEPLOY_PATH" ]; then
              echo "Creating backup of current deployment..."
              sudo cp -r "$DEPLOY_PATH" "$BACKUP_PATH"
            fi
            
            # Remove existing deployment directory and recreate it
            echo "Cleaning deployment directory..."
            sudo rm -rf "$DEPLOY_PATH"
            sudo mkdir -p "$DEPLOY_PATH"
            
            # Change ownership to current user for deployment
            sudo chown -R $(whoami):$(whoami) "$DEPLOY_PATH"
            
            # Extract new build
            echo "Extracting new build..."
            cd "$DEPLOY_PATH"
            tar -xzf /tmp/frontend-build.tar.gz
            
            # Set proper permissions for web server
            echo "Setting permissions..."
            chmod -R 755 "$DEPLOY_PATH"
            find "$DEPLOY_PATH" -type f -exec chmod 644 {} \;
            
            # Change ownership back to www-data for web server
            sudo chown -R www-data:www-data "$DEPLOY_PATH"
            
            # Create .htaccess file for SPA routing
            echo "Creating .htaccess..."
            cat > "$DEPLOY_PATH/.htaccess" << 'HTACCESS_EOF'
            <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteBase /
              RewriteRule ^index\.html$ - [L]
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule . /index.html [L]
            </IfModule>
            
            # Security headers
            <IfModule mod_headers.c>
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
            </IfModule>
            
            # Cache control for assets
            <IfModule mod_expires.c>
              ExpiresActive on
              ExpiresByType text/css "access plus 1 year"
              ExpiresByType application/javascript "access plus 1 year"
              ExpiresByType image/png "access plus 1 year"
              ExpiresByType image/svg+xml "access plus 1 year"
            </IfModule>
            HTACCESS_EOF
            
            # Set correct permissions for .htaccess
            chmod 644 "$DEPLOY_PATH/.htaccess"
            
            # Clean up
            rm -f /tmp/frontend-build.tar.gz
            
            # Verify deployment
            echo "===== DEPLOYMENT VERIFICATION ====="
            echo "Checking deployed files:"
            ls -la "$DEPLOY_PATH"
            echo ""
            echo "Checking assets directory:"
            ls -la "$DEPLOY_PATH/assets/" 2>/dev/null || echo "No assets directory found"
            echo ""
            echo "Checking .htaccess:"
            ls -la "$DEPLOY_PATH/.htaccess"
            echo "=============================="
            
            # Keep only the 3 most recent backups
            echo "Cleaning old backups..."
            find /var/www/licensing/Licensing-Server/Frontend/ -name "dist_backup_*" -type d | sort -r | tail -n +4 | xargs rm -rf
            
            echo "Deployment completed successfully!"